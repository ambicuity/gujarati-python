#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рк╕рлБрк╕ркВркЧркдркдрк╛ ркЯрлЗрк╕рлНркЯ - ркЧрлБркЬрк░рк╛ркдрлА рккрк╛ркИркерки

ркЖ ркЯрлЗрк╕рлНркЯ рк╡рк┐рк╡рк┐ркз рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рккрк░ ркЧрлБркЬрк░рк╛ркдрлА рккрк╛ркИркеркиркирлА рк╕рлБрк╕ркВркЧркдркдрк╛ ркЪркХрк╛рк╕рлЗ ркЫрлЗ.
"""

import os
import sys
import platform
import tempfile
import unittest
import subprocess
from pathlib import Path

# рккрлНрк░рлЛркЬрлЗркХрлНркЯ рккрк╛рке ркЙркорлЗрк░рлЛ
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from ркЧрлБркЬрк░рк╛ркдрлА_рккрк╛ркИркерки import ркХрлЛркб_ркЕркирлБрк╡рк╛ркж_ркХрк░рлЛ, ркЧрлБркЬрк░рк╛ркдрлА_ркХрлЛркб_ркЪрк▓рк╛рк╡рлЛ


class рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко_рк╕рлБрк╕ркВркЧркдркдрк╛_ркЯрлЗрк╕рлНркЯ(unittest.TestCase):
    """рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рк╕рлБрк╕ркВркЧркдркдрк╛ркирк╛ ркЯрлЗрк╕рлНркЯ"""

    def test_рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко_ркорк╛рк╣рк┐ркдрлА(self):
        """рккрлНрк▓рлЗркЯрклрлЛрк░рлНркоркирлА ркорк╛рк╣рк┐ркдрлА ркЪркХрк╛рк╕рлЗ ркЫрлЗ"""
        self.assertIsNotNone(platform.system())
        self.assertIsNotNone(platform.machine())
        self.assertIsNotNone(sys.version)
        self.assertEqual(sys.getdefaultencoding(), 'utf-8')

    def test_рклрк╛ркЗрк▓_рккрк╛рке_рк╣рлЗркирлНркбрк▓рк┐ркВркЧ(self):
        """рклрк╛ркЗрк▓ рккрк╛рке рк╣рлЗркирлНркбрк▓рк┐ркВркЧ ркЯрлЗрк╕рлНркЯ ркХрк░рлЗ ркЫрлЗ"""
        # ркЯрлЗркорлНрккрк░рк░рлА рклрк╛ркЗрк▓ ркмркирк╛рк╡рлЛ
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
            f.write('ркЫрк╛рккрлЛ("рк╣рлЗрк▓рлЛ рк╡рк░рлНрк▓рлНркб!")\n')
            temp_file = f.name
        
        try:
            # PathLib ркЙрккркпрлЛркЧ ркХрк░рлАркирлЗ рклрк╛ркЗрк▓ рк╡рк╛ркВркЪрлЛ
            path = Path(temp_file)
            self.assertTrue(path.exists())
            
            content = path.read_text(encoding='utf-8')
            self.assertIn('ркЫрк╛рккрлЛ', content)
            self.assertIn('рк╣рлЗрк▓рлЛ рк╡рк░рлНрк▓рлНркб', content)
            
        finally:
            # ркХрлНрк▓рлАркиркЕркк
            os.unlink(temp_file)

    def test_ркПркирлНркХрлЛркбрк┐ркВркЧ_ркЕркирлЗ_ркЕркирлБрк╡рк╛ркж(self):
        """ркЧрлБркЬрк░рк╛ркдрлА ркЕркХрлНрк╖рк░рлЛркирлА ркПркирлНркХрлЛркбрк┐ркВркЧ ркЕркирлЗ ркЕркирлБрк╡рк╛ркж ркЯрлЗрк╕рлНркЯ ркХрк░рлЗ ркЫрлЗ"""
        # ркЧрлБркЬрк░рк╛ркдрлА ркХрлЛркб
        ркЧрлБркЬрк░рк╛ркдрлА_ркХрлЛркб = """
ркЫрк╛рккрлЛ("ркиркорк╕рлНркХрк╛рк░! ркЖ ркЧрлБркЬрк░рк╛ркдрлА ркЫрлЗ.")  
ркирк╛рко = "рк░рк╛рко"
ркЙркВркорк░ = 25
ркЫрк╛рккрлЛ(f"{ркирк╛рко} ркирлА ркЙркВркорк░ {ркЙркВркорк░} рк╡рк░рлНрк╖ ркЫрлЗ.")
        """.strip()
        
        # ркХрлЛркб ркЕркирлБрк╡рк╛ркж ркХрк░рлЛ
        ркЕркирлБрк╡рк╛ркжрк┐ркд = ркХрлЛркб_ркЕркирлБрк╡рк╛ркж_ркХрк░рлЛ(ркЧрлБркЬрк░рк╛ркдрлА_ркХрлЛркб)
        self.assertIsNotNone(ркЕркирлБрк╡рк╛ркжрк┐ркд)
        self.assertIn('print', ркЕркирлБрк╡рк╛ркжрк┐ркд)  # ркЫрк╛рккрлЛ should be translated to print
        
        # ркХрлЛркб ркЪрк▓рк╛рк╡рлЛ  
        рккрк░рк┐ркгрк╛рко = ркЧрлБркЬрк░рк╛ркдрлА_ркХрлЛркб_ркЪрк▓рк╛рк╡рлЛ(ркЧрлБркЬрк░рк╛ркдрлА_ркХрлЛркб)
        self.assertTrue(рккрк░рк┐ркгрк╛рко['рк╕рклрк│ркдрк╛'], f"Code execution failed: {рккрк░рк┐ркгрк╛рко['ркПрк░рк░']}")
        self.assertIn('ркиркорк╕рлНркХрк╛рк░', рккрк░рк┐ркгрк╛рко['ркЖркЙркЯрккрлБркЯ'])

    def test_ркорлВрк│ркнрлВркд_ркХрлАрк╡рк░рлНркб_ркЕркирлБрк╡рк╛ркж(self):
        """ркорлВрк│ркнрлВркд ркХрлАрк╡рк░рлНркбрлНрк╕ркирлЛ ркЕркирлБрк╡рк╛ркж ркЪркХрк╛рк╕рлЗ ркЫрлЗ"""
        test_cases = [
            ("ркЫрк╛рккрлЛ('hello')", "print"),
            ("ркбрлЗркл test():", "def"),
            ("рклрлЛрк░ i ркЗрки рк░рлЗркВркЬ(5):", "for"),
            ("ркЬрлЛ рк╕рк╛ркЪрлБркВ:", "if"),
        ]
        
        for ркЧрлБркЬрк░рк╛ркдрлА, expected_english in test_cases:
            ркЕркирлБрк╡рк╛ркжрк┐ркд = ркХрлЛркб_ркЕркирлБрк╡рк╛ркж_ркХрк░рлЛ(ркЧрлБркЬрк░рк╛ркдрлА)
            self.assertIn(expected_english, ркЕркирлБрк╡рк╛ркжрк┐ркд, 
                         f"Expected '{expected_english}' in translation of '{ркЧрлБркЬрк░рк╛ркдрлА}', got: {ркЕркирлБрк╡рк╛ркжрк┐ркд}")

    def test_windows_utf8_cli_support(self):
        """Windows рккрк░ CLI interface ркирлА UTF-8 support ркЪркХрк╛рк╕рлЗ ркЫрлЗ"""
        import subprocess
        import os
        
        # CLI ркХркорк╛ркВркб ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ
        try:
            # UTF-8 environment variables рк╕рлЗркЯ ркХрк░рлЛ
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            env['PYTHONUTF8'] = '1'
            
            # ркорлБркЦрлНркп.py --help ркХркорк╛ркВркб ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ
            cmd = [sys.executable, "ркорлБркЦрлНркп.py", "--help"]
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace',
                env=env,
                timeout=10
            )
            
            # ркЖркЙркЯрккрлБркЯ ркЪркХрк╛рк╕рлЛ
            self.assertEqual(result.returncode, 0, f"CLI help failed with error: {result.stderr}")
            self.assertIn("ркЧрлБркЬрк░рк╛ркдрлА рккрк╛ркИркерки", result.stdout, "Gujarati text not found in help output")
            
            # Keywords ркХркорк╛ркВркб рккркг ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ
            cmd = [sys.executable, "ркорлБркЦрлНркп.py", "--keywords"]
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace',
                env=env,
                timeout=10
            )
            
            self.assertEqual(result.returncode, 0, f"CLI keywords failed with error: {result.stderr}")
            self.assertIn("ркЫрк╛рккрлЛ", result.stdout, "Keywords output not working properly")
            
        except subprocess.TimeoutExpired:
            self.skipTest("CLI test timed out")
        except Exception as e:
            self.skipTest(f"CLI test failed due to: {e}")


def рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко_ркорк╛рк╣рк┐ркдрлА_ркмркдрк╛рк╡рлЛ():
    """рккрлНрк▓рлЗркЯрклрлЛрк░рлНркоркирлА ркорк╛рк╣рк┐ркдрлА ркжрлЗркЦрк╛ркбрлЗ ркЫрлЗ"""
    print("ЁЯЦея╕П рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко ркорк╛рк╣рк┐ркдрлА:")
    print(f"   OS: {platform.system()} {platform.release()}")
    print(f"   Architecture: {platform.machine()}")
    print(f"   Python: {sys.version}")
    print(f"   Encoding: {sys.getdefaultencoding()}")
    print()


if __name__ == "__main__":
    print("=" * 60)
    print("ркЧрлБркЬрк░рк╛ркдрлА рккрк╛ркИркерки - рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рк╕рлБрк╕ркВркЧркдркдрк╛ ркЯрлЗрк╕рлНркЯ")  
    print("=" * 60)
    print()
    
    рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко_ркорк╛рк╣рк┐ркдрлА_ркмркдрк╛рк╡рлЛ()
    
    # Run unit tests
    unittest.main(verbosity=2, buffer=True)