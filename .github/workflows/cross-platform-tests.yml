name: ркХрлНрк░рлЛрк╕-рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко ркЯрлЗрк╕рлНркЯ (Cross-Platform Tests)

# рк╡рк░рлНркХрклрлНрк▓рлЛ ркЪрк╛рк▓рлБ ркХрк░рк╡рк╛ркирк╛ ркХрк╛рк░ркгрлЛ
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # ркорлЗркирлНркпрлБркЕрк▓ рк░рки ркорк╛ркЯрлЗ

# Permissions for the workflow
permissions:
  contents: read

# Jobs
jobs:
  test:
    name: "ркЯрлЗрк╕рлНркЯ ${{ matrix.os }} рккрк░ Python ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    
    # Strategy matrix for testing on multiple platforms and Python versions
    strategy:
      fail-fast: false  # ркмркзрк╛ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рккрк░ ркЯрлЗрк╕рлНркЯ ркЪрк╛рк▓рлБ рк░рк╛ркЦрлЛ, ркнрк▓рлЗ ркПркХ fail ркерк╛ркп
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        # ркорк╛ркдрлНрк░ latest Python рк╡рк░рлНркЭрки macOS ркЕркирлЗ Windows рккрк░ ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ (CI time ркмркЪрк╛рк╡рк╡рк╛ ркорк╛ркЯрлЗ)
        exclude:
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest  
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
    
    steps:
    - name: ЁЯУе ркХрлЛркб ркбрк╛ркЙркирк▓рлЛркб (Checkout code)
      uses: actions/checkout@v4

    - name: ЁЯРН Python ${{ matrix.python-version }} рк╕рлЗркЯркЕркк (Setup Python)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: ЁЯУж Dependencies ркЗркирлНрк╕рлНркЯрлЛрк▓ (Install dependencies)
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        # рк╡рлИркХрк▓рлНрккрк┐ркХ: development dependencies
        python -c "import os; os.path.exists('requirements-dev.txt') and os.system('python -m pip install -r requirements-dev.txt')"
      shell: bash  # Windows рккрк░ рккркг bash ркЙрккркпрлЛркЧ ркХрк░рлЛ

    - name: ЁЯзк ркорлВрк│ркнрлВркд ркЯрлЗрк╕рлНркЯ (Run basic tests)
      run: |
        python -m unittest ркЯрлЗрк╕рлНркЯ.ркЯрлЗрк╕рлНркЯ_ркЕркирлБрк╡рк╛ркжркХ -v
        python -m unittest ркЯрлЗрк╕рлНркЯ.рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко_ркЯрлЗрк╕рлНркЯ -v
      shell: bash

    - name: ЁЯУЛ ркЙркжрк╛рк╣рк░ркг ркЯрлЗрк╕рлНркЯ (Run example tests)  
      run: |
        python -m unittest ркЯрлЗрк╕рлНркЯ.ркЙркжрк╛рк╣рк░ркг_ркЯрлЗрк╕рлНркЯ -v
      shell: bash

    - name: тЬЕ ркмркзрк╛ ркЯрлЗрк╕рлНркЯ ркПркХрк╕рк╛ркерлЗ (Run all tests together)
      run: |
        echo "Running individual test modules..."
        python -m unittest ркЯрлЗрк╕рлНркЯ.ркЯрлЗрк╕рлНркЯ_ркЕркирлБрк╡рк╛ркжркХ -v
        python -m unittest ркЯрлЗрк╕рлНркЯ.рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко_ркЯрлЗрк╕рлНркЯ -v  
        python -m unittest ркЯрлЗрк╕рлНркЯ.ркЙркжрк╛рк╣рк░ркг_ркЯрлЗрк╕рлНркЯ -v
      shell: bash

    - name: ЁЯФз ркХркорк╛ркВркб рк▓рк╛ркЗрки ркЗркирлНркЯрк░рклрлЗрк╕ ркЯрлЗрк╕рлНркЯ (Test CLI interface)
      run: |
        # рк╣рлЗрк▓рлНркк ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ
        python ркорлБркЦрлНркп.py --help
        
        # ркХрлАрк╡рк░рлНркб рк▓рк┐рк╕рлНркЯ ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ  
        python ркорлБркЦрлНркп.py --keywords
        
        # ркХрлАрк╡рк░рлНркб рк╕рк░рлНркЪ ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ
        python ркорлБркЦрлНркп.py --search "ркЫрк╛рккрлЛ"
        
        # рк╕рк░рк│ ркЙркжрк╛рк╣рк░ркг ркЪрк▓рк╛рк╡рлЛ
        python ркорлБркЦрлНркп.py ркЙркжрк╛рк╣рк░ркгрлЛ/рк╕рк░рк│_ркбрлЗркорлЛ.py
        
        # ркЕркирлБрк╡рк╛ркж ркЯрлЗрк╕рлНркЯ ркХрк░рлЛ
        python ркорлБркЦрлНркп.py --translate ркЙркжрк╛рк╣рк░ркгрлЛ/рк╕рк░рк│_ркбрлЗркорлЛ.py
      shell: bash

    - name: ЁЯУК рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко ркорк╛рк╣рк┐ркдрлА (Platform info)
      run: |
        echo "ЁЯЦея╕П Platform Information:"
        python -c 'import sys, platform, locale; print(f"  OS: {platform.system()} {platform.release()}"); print(f"  Architecture: {platform.machine()}"); print(f"  Python: {sys.version}"); print(f"  Encoding: {sys.getdefaultencoding()}"); print(f"  Locale: {locale.getdefaultlocale()}"); print(f"  File system encoding: {sys.getfilesystemencoding()}"); print()'
        echo "ЁЯФд Unicode Support Test:"
        python -c "gujarati_text = 'ркЧрлБркЬрк░рк╛ркдрлА рккрк╛ркИркерки'; print(f'  Gujarati text: {gujarati_text}'); print(f'  Length: {len(gujarati_text)} characters'); print(f'  Encoded length: {len(gujarati_text.encode(\"utf-8\"))} bytes')"
      shell: bash

  # ркирк┐рк╖рлНркХрк░рлНрк╖ ркЬрлЛркм - ркмркзрк╛ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рккрк░ рк╕рклрк│ркдрк╛ ркЪркХрк╛рк╕рлЗ ркЫрлЗ
  conclude:
    name: ЁЯОп ркирк┐рк╖рлНркХрк░рлНрк╖ (Test Results Summary)
    runs-on: ubuntu-latest
    needs: test
    if: always()  # рк╣ркВркорлЗрк╢рк╛ ркЪрк╛рк▓рк╛рк╡рлЛ, ркнрк▓рлЗ tests fail ркерк╛ркп
    
    steps:
    - name: тЬЕ ркдркорк╛рко рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рк╕рклрк│ркдрк╛ (All platforms success)
      if: ${{ needs.test.result == 'success' }}
      run: |
        echo "ЁЯОЙ ркмркзрк╛ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рккрк░ ркдркорк╛рко ркЯрлЗрк╕рлНркЯ рк╕рклрк│!"
        echo "тЬЕ Linux (Ubuntu), Windows, and macOS testing completed successfully"
        echo "тЬЕ Python 3.8-3.12 compatibility verified" 
        echo "тЬЕ Gujarati Python examples working on all platforms"
        echo "тЬЕ Cross-platform UTF-8 support confirmed"

    - name: тЭМ ркХрлЗркЯрк▓рк╛ркХ ркЯрлЗрк╕рлНркЯ ркирк┐рк╖рлНрклрк│ (Some tests failed)  
      if: ${{ needs.test.result != 'success' }}
      run: |
        echo "тЭМ ркХрлЗркЯрк▓рк╛ркХ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рккрк░ ркЯрлЗрк╕рлНркЯ ркирк┐рк╖рлНрклрк│"
        echo "Please check the individual job results above"
        exit 1

  # рк╡рлИркХрк▓рлНрккрк┐ркХ: рк▓рк┐ркирлНркЯрк┐ркВркЧ ркЬрлЛркм
  lint:
    name: ЁЯФН ркХрлЛркб ркХрлНрк╡рлЛрк▓рк┐ркЯрлА (Code Quality)
    runs-on: ubuntu-latest
    if: false  # рк╣рк╛рк▓ ркорк╛ркЯрлЗ disabled, enable ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ true ркХрк░рлЛ
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # ркорлБркЦрлНркп ркХрлЛркб ркбрк┐рк░рлЗркХрлНркЯрк░рлА lint ркХрк░рлЛ, Gujarati рклрк╛ркИрк▓ ркирк╛ркорлЛ рк╕рк╛ркерлЗ рк╕ркорк╕рлНркпрк╛ рк╣рлЛркИ рк╢ркХрлЗ
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "Linting disabled for Gujarati file names compatibility"